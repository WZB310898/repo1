package cn.itcast.jdbc;

import java.math.BigDecimal;
import java.sql.*;

/**
 * 执行DDL语句
 */
public class JDBCDemo7 {
    public static void main(String[] args) {
        Connection conn = null;
        Statement stmt = null;
        ResultSet rs = null;
        try {
            Class.forName("com.ibm.db2.jcc.DB2Driver");
            conn = DriverManager.getConnection("jdbc:db2://10.10.10.66:50000/v6td", "db2inst2", "yxPT66@!0.^^");
            String sql = "WITH PP AS ( SELECT YY.COM_ID, CASE WHEN YY.ITEM_ID IS NULL AND YY.COM_ID IS NOT NULL THEN '小计' ELSE YY.ITEM_ID END ITEM_ID , YY.ITEM_NAME, YY.DICT_VALUE, SUM(YY.QTY_NEED) QTY_NEED, SUM(YY.QTY_ORDER) QTY_ORDER, YY.MZL, YY.ALL_QTY_ORDER, YY.ORDER_ZHANBI, YY.ORDER_RANKS, YY.ALL_AMT_SOLD, CASE WHEN YY.AMT_SOLD IS NULL THEN SUM(YY.AMT_SOLD) ELSE YY.AMT_SOLD END AMT_SOLD, YY.AMT_ZHANBI, YY.AMT_RANKS FROM ( SELECT AA.COM_ID, AA.ITEM_ID, AA.ITEM_NAME, AA.DICT_VALUE, CAST(ROUND(AA.QTY_NEED * AA.T_SIZE/AA.X_SIZE,3) AS DECIMAL(18,3)) QTY_NEED, CAST(ROUND(AA.QTY_ORDER * AA.T_SIZE/AA.X_SIZE,3) AS DECIMAL(18,3)) QTY_ORDER, AA.MZL, CAST(ROUND(AA.ALL_QTY_ORDER * AA.T_SIZE/AA.X_SIZE,3) AS DECIMAL(18,3)) ALL_QTY_ORDER, AA.ORDER_ZHANBI, AA.ORDER_RANKS, AA.ALL_AMT_SOLD, AA.AMT_SOLD, AA.AMT_ZHANBI, AA.AMT_RANKS FROM ( SELECT PC.*, COALESCE(PD.QTY_NEED,0.00) QTY_NEED, COALESCE(PD.QTY_ORDER,0.00) QTY_ORDER, COALESCE( PD.MZL,0.00) MZL, COALESCE (PD.ALL_QTY_ORDER ,PE.ALL_QTY_ORDER) ALL_QTY_ORDER, COALESCE(PD.ORDER_ZHANBI,0.00) ORDER_ZHANBI, CASE WHEN PD.ORDER_RANKS IS NULL THEN 0 ELSE PD.ORDER_RANKS END ORDER_RANKS, SUM( PD.AMT_SOLD) OVER () ALL_AMT_SOLD, COALESCE(PD.AMT_SOLD,0.00) AMT_SOLD, CASE WHEN SUM( PD.AMT_SOLD) OVER () =0 THEN 0 ELSE COALESCE(PD.AMT_SOLD ,0.00) * 100/ SUM ( PD.AMT_SOLD) OVER () END AMT_ZHANBI, ROW_NUMBER() OVER ( ORDER BY COALESCE(PD.AMT_SOLD,0.00) DESC) AMT_RANKS FROM ( SELECT ET.COM_ID, ET.ITEM_ID, PI.ITEM_NAME, PI.T_SIZE, PI.X_SIZE, BA.DICT_VALUE FROM PLM_ITEM_COM_EXT ET, PLM_ITEM PI, BASE_DICT BA WHERE ET.COM_ID ='00000000000429500' AND ET.IS_TSALE = '1' AND BA.DICT_ID='BRM_ITEM_KIND' AND ET.ITEM_ID =PI.ITEM_ID AND PI.KIND=BA.DICT_KEY) PC LEFT JOIN ( SELECT COM_ID, ITEM_ID, SUM( QTY_NEED ) QTY_NEED , SUM(QTY_ORDER ) QTY_ORDER, CAST(ROUND( CASE WHEN SUM( QTY_NEED ) =0 THEN 0 ELSE SUM (QTY_ORDER )* 100 /SUM ( QTY_NEED ) END , 2)AS DECIMAL(18,2)) MZL, SUM( SUM( QTY_ORDER )) OVER () ALL_QTY_ORDER , CASE WHEN ( SUM( SUM( QTY_ORDER )) OVER ()) =0 THEN 0 ELSE SUM ( QTY_ORDER ) * 100/(SUM ( SUM ( QTY_ORDER )) OVER ()) END ORDER_ZHANBI, ROW_NUMBER() OVER ( ORDER BY COALESCE(SUM( QTY_ORDER ),0.00) DESC) ORDER_RANKS, SUM( AMT_SOLD ) AMT_SOLD FROM SGP_COM_ITEM_SW WHERE COM_ID ='00000000000429500' AND DATE1 BETWEEN '2020011' AND '2020102' GROUP BY ITEM_ID, COM_ID ) PD ON PC.ITEM_ID=PD.ITEM_ID FULL JOIN ( SELECT COM_ID, SUM( SUM( QTY_ORDER )) OVER () ALL_QTY_ORDER FROM SGP_COM_ITEM_SW WHERE COM_ID ='00000000000429500' AND DATE1 BETWEEN '2020011' AND '2020102' GROUP BY COM_ID) PE ON 1=1) AA UNION ALL SELECT AA.COM_ID, AA.ITEM_ID, AA.ITEM_NAME, AA.DICT_VALUE, CAST(ROUND(AA.QTY_NEED * AA.T_SIZE/AA.X_SIZE,3) AS DECIMAL(18,3)) QTY_NEED, CAST(ROUND(AA.QTY_ORDER * AA.T_SIZE/AA.X_SIZE,3) AS DECIMAL(18,3)) QTY_ORDER, AA.MZL, CAST(ROUND(AA.ALL_QTY_ORDER * AA.T_SIZE/AA.X_SIZE,3) AS DECIMAL(18,3)) ALL_QTY_ORDER, AA.ORDER_ZHANBI, AA.ORDER_RANKS, AA.ALL_AMT_SOLD, AA.AMT_SOLD, AA.AMT_ZHANBI, AA.AMT_RANKS FROM ( SELECT PC.*, COALESCE(PD.QTY_NEED,0.00) QTY_NEED, COALESCE(PD.QTY_ORDER,0.00) QTY_ORDER, COALESCE( PD.MZL,0.00) MZL, COALESCE (PD.ALL_QTY_ORDER ,PE.ALL_QTY_ORDER) ALL_QTY_ORDER, COALESCE(PD.ORDER_ZHANBI,0.00) ORDER_ZHANBI, CASE WHEN PD.ORDER_RANKS IS NULL THEN 0 ELSE PD.ORDER_RANKS END ORDER_RANKS, SUM( PD.AMT_SOLD) OVER () ALL_AMT_SOLD, COALESCE(PD.AMT_SOLD,0.00) AMT_SOLD, CASE WHEN SUM( PD.AMT_SOLD) OVER () =0 THEN 0 ELSE COALESCE(PD.AMT_SOLD ,0.00) * 100/ SUM ( PD.AMT_SOLD) OVER () END AMT_ZHANBI, ROW_NUMBER() OVER ( ORDER BY COALESCE(PD.AMT_SOLD,0.00) DESC) AMT_RANKS FROM ( SELECT ET.COM_ID, ET.ITEM_ID, PI.ITEM_NAME, PI.T_SIZE, PI.X_SIZE, BA.DICT_VALUE FROM PLM_ITEM_COM_EXT ET, PLM_ITEM PI, BASE_DICT BA WHERE ET.COM_ID ='780000000' AND ET.IS_TSALE = '1' AND BA.DICT_ID='BRM_ITEM_KIND' AND ET.ITEM_ID =PI.ITEM_ID AND PI.KIND=BA.DICT_KEY) PC LEFT JOIN ( SELECT COM_ID, ITEM_ID, SUM( QTY_NEED ) QTY_NEED , SUM(QTY_ORDER ) QTY_ORDER, CAST(ROUND( CASE WHEN SUM( QTY_NEED ) =0 THEN 0 ELSE SUM (QTY_ORDER )* 100 /SUM ( QTY_NEED ) END , 2)AS DECIMAL(18,2)) MZL, SUM( SUM( QTY_ORDER )) OVER () ALL_QTY_ORDER , CASE WHEN ( SUM( SUM( QTY_ORDER )) OVER ()) =0 THEN 0 ELSE SUM ( QTY_ORDER ) * 100/(SUM ( SUM ( QTY_ORDER )) OVER ()) END ORDER_ZHANBI, ROW_NUMBER() OVER ( ORDER BY COALESCE(SUM( QTY_ORDER ),0.00) DESC) ORDER_RANKS, SUM( AMT_SOLD ) AMT_SOLD FROM SGP_COM_ITEM_SW WHERE COM_ID ='780000000' AND DATE1 BETWEEN '2020011' AND '2020102' GROUP BY ITEM_ID, COM_ID ) PD ON PC.ITEM_ID=PD.ITEM_ID FULL JOIN ( SELECT COM_ID, SUM( SUM( QTY_ORDER )) OVER () ALL_QTY_ORDER FROM SGP_COM_ITEM_SW WHERE COM_ID ='780000000' AND DATE1 BETWEEN '2020011' AND '2020102' GROUP BY COM_ID) PE ON 1=1) AA UNION ALL SELECT AA.COM_ID, AA.ITEM_ID, AA.ITEM_NAME, AA.DICT_VALUE, CAST(ROUND(AA.QTY_NEED * AA.T_SIZE/AA.X_SIZE,3) AS DECIMAL(18,3)) QTY_NEED, CAST(ROUND(AA.QTY_ORDER * AA.T_SIZE/AA.X_SIZE,3) AS DECIMAL(18,3)) QTY_ORDER, AA.MZL, CAST(ROUND(AA.ALL_QTY_ORDER * AA.T_SIZE/AA.X_SIZE,3) AS DECIMAL(18,3)) ALL_QTY_ORDER, AA.ORDER_ZHANBI, AA.ORDER_RANKS, AA.ALL_AMT_SOLD, AA.AMT_SOLD, AA.AMT_ZHANBI, AA.AMT_RANKS FROM ( SELECT PC.*, COALESCE(PD.QTY_NEED,0.00) QTY_NEED, COALESCE(PD.QTY_ORDER,0.00) QTY_ORDER, COALESCE( PD.MZL,0.00) MZL, COALESCE (PD.ALL_QTY_ORDER ,PE.ALL_QTY_ORDER) ALL_QTY_ORDER, COALESCE(PD.ORDER_ZHANBI,0.00) ORDER_ZHANBI, CASE WHEN PD.ORDER_RANKS IS NULL THEN 0 ELSE PD.ORDER_RANKS END ORDER_RANKS, SUM( PD.AMT_SOLD) OVER () ALL_AMT_SOLD, COALESCE(PD.AMT_SOLD,0.00) AMT_SOLD, CASE WHEN SUM( PD.AMT_SOLD) OVER () =0 THEN 0 ELSE COALESCE(PD.AMT_SOLD ,0.00) * 100/ SUM ( PD.AMT_SOLD) OVER () END AMT_ZHANBI, ROW_NUMBER() OVER ( ORDER BY COALESCE(PD.AMT_SOLD,0.00) DESC) AMT_RANKS FROM ( SELECT ET.COM_ID, ET.ITEM_ID, PI.ITEM_NAME, PI.T_SIZE, PI.X_SIZE, BA.DICT_VALUE FROM PLM_ITEM_COM_EXT ET, PLM_ITEM PI, BASE_DICT BA WHERE ET.COM_ID ='630000000' AND ET.IS_TSALE = '1' AND BA.DICT_ID='BRM_ITEM_KIND' AND ET.ITEM_ID =PI.ITEM_ID AND PI.KIND=BA.DICT_KEY) PC LEFT JOIN ( SELECT COM_ID, ITEM_ID, SUM( QTY_NEED ) QTY_NEED , SUM(QTY_ORDER ) QTY_ORDER, CAST(ROUND( CASE WHEN SUM( QTY_NEED ) =0 THEN 0 ELSE SUM (QTY_ORDER )* 100 /SUM ( QTY_NEED ) END , 2)AS DECIMAL(18,2)) MZL, SUM( SUM( QTY_ORDER )) OVER () ALL_QTY_ORDER , CASE WHEN ( SUM( SUM( QTY_ORDER )) OVER ()) =0 THEN 0 ELSE SUM ( QTY_ORDER ) * 100/(SUM ( SUM ( QTY_ORDER )) OVER ()) END ORDER_ZHANBI, ROW_NUMBER() OVER ( ORDER BY COALESCE(SUM( QTY_ORDER ),0.00) DESC) ORDER_RANKS, SUM( AMT_SOLD ) AMT_SOLD FROM SGP_COM_ITEM_SW WHERE COM_ID ='630000000' AND DATE1 BETWEEN '2020011' AND '2020102' GROUP BY ITEM_ID, COM_ID ) PD ON PC.ITEM_ID=PD.ITEM_ID FULL JOIN ( SELECT COM_ID, SUM( SUM( QTY_ORDER )) OVER () ALL_QTY_ORDER FROM SGP_COM_ITEM_SW WHERE COM_ID ='630000000' AND DATE1 BETWEEN '2020011' AND '2020102' GROUP BY COM_ID) PE ON 1=1) AA UNION ALL SELECT AA.COM_ID, AA.ITEM_ID, AA.ITEM_NAME, AA.DICT_VALUE, CAST(ROUND(AA.QTY_NEED * AA.T_SIZE/AA.X_SIZE,3) AS DECIMAL(18,3)) QTY_NEED, CAST(ROUND(AA.QTY_ORDER * AA.T_SIZE/AA.X_SIZE,3) AS DECIMAL(18,3)) QTY_ORDER, AA.MZL, CAST(ROUND(AA.ALL_QTY_ORDER * AA.T_SIZE/AA.X_SIZE,3) AS DECIMAL(18,3)) ALL_QTY_ORDER, AA.ORDER_ZHANBI, AA.ORDER_RANKS, AA.ALL_AMT_SOLD, AA.AMT_SOLD, AA.AMT_ZHANBI, AA.AMT_RANKS FROM ( SELECT PC.*, COALESCE(PD.QTY_NEED,0.00) QTY_NEED, COALESCE(PD.QTY_ORDER,0.00) QTY_ORDER, COALESCE( PD.MZL,0.00) MZL, COALESCE (PD.ALL_QTY_ORDER ,PE.ALL_QTY_ORDER) ALL_QTY_ORDER, COALESCE(PD.ORDER_ZHANBI,0.00) ORDER_ZHANBI, CASE WHEN PD.ORDER_RANKS IS NULL THEN 0 ELSE PD.ORDER_RANKS END ORDER_RANKS, SUM( PD.AMT_SOLD) OVER () ALL_AMT_SOLD, COALESCE(PD.AMT_SOLD,0.00) AMT_SOLD, CASE WHEN SUM( PD.AMT_SOLD) OVER () =0 THEN 0 ELSE COALESCE(PD.AMT_SOLD ,0.00) * 100/ SUM ( PD.AMT_SOLD) OVER () END AMT_ZHANBI, ROW_NUMBER() OVER ( ORDER BY COALESCE(PD.AMT_SOLD,0.00) DESC) AMT_RANKS FROM ( SELECT ET.COM_ID, ET.ITEM_ID, PI.ITEM_NAME, PI.T_SIZE, PI.X_SIZE, BA.DICT_VALUE FROM PLM_ITEM_COM_EXT ET, PLM_ITEM PI, BASE_DICT BA WHERE ET.COM_ID ='740000000' AND ET.IS_TSALE = '1' AND BA.DICT_ID='BRM_ITEM_KIND' AND ET.ITEM_ID =PI.ITEM_ID AND PI.KIND=BA.DICT_KEY) PC LEFT JOIN ( SELECT COM_ID, ITEM_ID, SUM( QTY_NEED ) QTY_NEED , SUM(QTY_ORDER ) QTY_ORDER, CAST(ROUND( CASE WHEN SUM( QTY_NEED ) =0 THEN 0 ELSE SUM (QTY_ORDER )* 100 /SUM ( QTY_NEED ) END , 2)AS DECIMAL(18,2)) MZL, SUM( SUM( QTY_ORDER )) OVER () ALL_QTY_ORDER , CASE WHEN ( SUM( SUM( QTY_ORDER )) OVER ()) =0 THEN 0 ELSE SUM ( QTY_ORDER ) * 100/(SUM ( SUM ( QTY_ORDER )) OVER ()) END ORDER_ZHANBI, ROW_NUMBER() OVER ( ORDER BY COALESCE(SUM( QTY_ORDER ),0.00) DESC) ORDER_RANKS, SUM( AMT_SOLD ) AMT_SOLD FROM SGP_COM_ITEM_SW WHERE COM_ID ='740000000' AND DATE1 BETWEEN '2020011' AND '2020102' GROUP BY ITEM_ID, COM_ID ) PD ON PC.ITEM_ID=PD.ITEM_ID FULL JOIN ( SELECT COM_ID, SUM( SUM( QTY_ORDER )) OVER () ALL_QTY_ORDER FROM SGP_COM_ITEM_SW WHERE COM_ID ='740000000' AND DATE1 BETWEEN '2020011' AND '2020102' GROUP BY COM_ID) PE ON 1=1) AA UNION ALL SELECT AA.COM_ID, AA.ITEM_ID, AA.ITEM_NAME, AA.DICT_VALUE, CAST(ROUND(AA.QTY_NEED * AA.T_SIZE/AA.X_SIZE,3) AS DECIMAL(18,3)) QTY_NEED, CAST(ROUND(AA.QTY_ORDER * AA.T_SIZE/AA.X_SIZE,3) AS DECIMAL(18,3)) QTY_ORDER, AA.MZL, CAST(ROUND(AA.ALL_QTY_ORDER * AA.T_SIZE/AA.X_SIZE,3) AS DECIMAL(18,3)) ALL_QTY_ORDER, AA.ORDER_ZHANBI, AA.ORDER_RANKS, AA.ALL_AMT_SOLD, AA.AMT_SOLD, AA.AMT_ZHANBI, AA.AMT_RANKS FROM ( SELECT PC.*, COALESCE(PD.QTY_NEED,0.00) QTY_NEED, COALESCE(PD.QTY_ORDER,0.00) QTY_ORDER, COALESCE( PD.MZL,0.00) MZL, COALESCE (PD.ALL_QTY_ORDER ,PE.ALL_QTY_ORDER) ALL_QTY_ORDER, COALESCE(PD.ORDER_ZHANBI,0.00) ORDER_ZHANBI, CASE WHEN PD.ORDER_RANKS IS NULL THEN 0 ELSE PD.ORDER_RANKS END ORDER_RANKS, SUM( PD.AMT_SOLD) OVER () ALL_AMT_SOLD, COALESCE(PD.AMT_SOLD,0.00) AMT_SOLD, CASE WHEN SUM( PD.AMT_SOLD) OVER () =0 THEN 0 ELSE COALESCE(PD.AMT_SOLD ,0.00) * 100/ SUM ( PD.AMT_SOLD) OVER () END AMT_ZHANBI, ROW_NUMBER() OVER ( ORDER BY COALESCE(PD.AMT_SOLD,0.00) DESC) AMT_RANKS FROM ( SELECT ET.COM_ID, ET.ITEM_ID, PI.ITEM_NAME, PI.T_SIZE, PI.X_SIZE, BA.DICT_VALUE FROM PLM_ITEM_COM_EXT ET, PLM_ITEM PI, BASE_DICT BA WHERE ET.COM_ID ='700000000' AND ET.IS_TSALE = '1' AND BA.DICT_ID='BRM_ITEM_KIND' AND ET.ITEM_ID =PI.ITEM_ID AND PI.KIND=BA.DICT_KEY) PC LEFT JOIN ( SELECT COM_ID, ITEM_ID, SUM( QTY_NEED ) QTY_NEED , SUM(QTY_ORDER ) QTY_ORDER, CAST(ROUND( CASE WHEN SUM( QTY_NEED ) =0 THEN 0 ELSE SUM (QTY_ORDER )* 100 /SUM ( QTY_NEED ) END , 2)AS DECIMAL(18,2)) MZL, SUM( SUM( QTY_ORDER )) OVER () ALL_QTY_ORDER , CASE WHEN ( SUM( SUM( QTY_ORDER )) OVER ()) =0 THEN 0 ELSE SUM ( QTY_ORDER ) * 100/(SUM ( SUM ( QTY_ORDER )) OVER ()) END ORDER_ZHANBI, ROW_NUMBER() OVER ( ORDER BY COALESCE(SUM( QTY_ORDER ),0.00) DESC) ORDER_RANKS, SUM( AMT_SOLD ) AMT_SOLD FROM SGP_COM_ITEM_SW WHERE COM_ID ='700000000' AND DATE1 BETWEEN '2020011' AND '2020102' GROUP BY ITEM_ID, COM_ID ) PD ON PC.ITEM_ID=PD.ITEM_ID FULL JOIN ( SELECT COM_ID, SUM( SUM( QTY_ORDER )) OVER () ALL_QTY_ORDER FROM SGP_COM_ITEM_SW WHERE COM_ID ='700000000' AND DATE1 BETWEEN '2020011' AND '2020102' GROUP BY COM_ID) PE ON 1=1) AA UNION ALL SELECT AA.COM_ID, AA.ITEM_ID, AA.ITEM_NAME, AA.DICT_VALUE, CAST(ROUND(AA.QTY_NEED * AA.T_SIZE/AA.X_SIZE,3) AS DECIMAL(18,3)) QTY_NEED, CAST(ROUND(AA.QTY_ORDER * AA.T_SIZE/AA.X_SIZE,3) AS DECIMAL(18,3)) QTY_ORDER, AA.MZL, CAST(ROUND(AA.ALL_QTY_ORDER * AA.T_SIZE/AA.X_SIZE,3) AS DECIMAL(18,3)) ALL_QTY_ORDER, AA.ORDER_ZHANBI, AA.ORDER_RANKS, AA.ALL_AMT_SOLD, AA.AMT_SOLD, AA.AMT_ZHANBI, AA.AMT_RANKS FROM ( SELECT PC.*, COALESCE(PD.QTY_NEED,0.00) QTY_NEED, COALESCE(PD.QTY_ORDER,0.00) QTY_ORDER, COALESCE( PD.MZL,0.00) MZL, COALESCE (PD.ALL_QTY_ORDER ,PE.ALL_QTY_ORDER) ALL_QTY_ORDER, COALESCE(PD.ORDER_ZHANBI,0.00) ORDER_ZHANBI, CASE WHEN PD.ORDER_RANKS IS NULL THEN 0 ELSE PD.ORDER_RANKS END ORDER_RANKS, SUM( PD.AMT_SOLD) OVER () ALL_AMT_SOLD, COALESCE(PD.AMT_SOLD,0.00) AMT_SOLD, CASE WHEN SUM( PD.AMT_SOLD) OVER () =0 THEN 0 ELSE COALESCE(PD.AMT_SOLD ,0.00) * 100/ SUM ( PD.AMT_SOLD) OVER () END AMT_ZHANBI, ROW_NUMBER() OVER ( ORDER BY COALESCE(PD.AMT_SOLD,0.00) DESC) AMT_RANKS FROM ( SELECT ET.COM_ID, ET.ITEM_ID, PI.ITEM_NAME, PI.T_SIZE, PI.X_SIZE, BA.DICT_VALUE FROM PLM_ITEM_COM_EXT ET, PLM_ITEM PI, BASE_DICT BA WHERE ET.COM_ID ='720000000' AND ET.IS_TSALE = '1' AND BA.DICT_ID='BRM_ITEM_KIND' AND ET.ITEM_ID =PI.ITEM_ID AND PI.KIND=BA.DICT_KEY) PC LEFT JOIN ( SELECT COM_ID, ITEM_ID, SUM( QTY_NEED ) QTY_NEED , SUM(QTY_ORDER ) QTY_ORDER, CAST(ROUND( CASE WHEN SUM( QTY_NEED ) =0 THEN 0 ELSE SUM (QTY_ORDER )* 100 /SUM ( QTY_NEED ) END , 2)AS DECIMAL(18,2)) MZL, SUM( SUM( QTY_ORDER )) OVER () ALL_QTY_ORDER , CASE WHEN ( SUM( SUM( QTY_ORDER )) OVER ()) =0 THEN 0 ELSE SUM ( QTY_ORDER ) * 100/(SUM ( SUM ( QTY_ORDER )) OVER ()) END ORDER_ZHANBI, ROW_NUMBER() OVER ( ORDER BY COALESCE(SUM( QTY_ORDER ),0.00) DESC) ORDER_RANKS, SUM( AMT_SOLD ) AMT_SOLD FROM SGP_COM_ITEM_SW WHERE COM_ID ='720000000' AND DATE1 BETWEEN '2020011' AND '2020102' GROUP BY ITEM_ID, COM_ID ) PD ON PC.ITEM_ID=PD.ITEM_ID FULL JOIN ( SELECT COM_ID, SUM( SUM( QTY_ORDER )) OVER () ALL_QTY_ORDER FROM SGP_COM_ITEM_SW WHERE COM_ID ='720000000' AND DATE1 BETWEEN '2020011' AND '2020102' GROUP BY COM_ID) PE ON 1=1) AA ) YY GROUP BY ROLLUP(YY.COM_ID,(YY.ITEM_ID,YY.ITEM_NAME,YY.DICT_VALUE,YY.MZL,YY.ALL_QTY_ORDER, YY.ORDER_ZHANBI ,YY.ORDER_RANKS,YY.ALL_AMT_SOLD,YY.AMT_SOLD,YY.AMT_ZHANBI,YY.AMT_RANKS) ) ) SELECT * FROM ( SELECT COM_ID, ITEM_ID, ITEM_NAME, DICT_VALUE, QTY_NEED, QTY_ORDER, MZL, ALL_QTY_ORDER, ORDER_ZHANBI, ROW_NUMBER() OVER ( ORDER BY QTY_ORDER DESC ) ORDER_RANKS, ALL_AMT_SOLD, AMT_SOLD, AMT_ZHANBI, ROW_NUMBER() OVER ( ORDER BY AMT_SOLD DESC ) AMT_RANKS FROM PP WHERE PP.ITEM_ID ='小计' UNION ALL SELECT * FROM PP WHERE PP.ITEM_ID !='小计' AND PP.COM_ID IS NOT NULL )LL ORDER BY COM_ID ASC, ITEM_ID DESC";
            stmt = conn.createStatement();
            rs = stmt.executeQuery(sql);
            BigDecimal sumOrder =BigDecimal.ZERO;
            while (rs.next()) {
                String qty_order = rs.getString("QTY_ORDER");
                BigDecimal order =new BigDecimal(qty_order);
                BigDecimal decimalOrder = toBigDecimal(qty_order, 2);
                sumOrder=sumOrder.add(order);
                System.out.println(sumOrder);
            }


           /* //6.1 让游标向下移动一行
            if(rs.next()){
                //判断是否有数据
                //6.2 获取数据
                int id = rs.getInt(1);
                String name = rs.getString("name");
                double balance = rs.getDouble(3);

                System.out.println(id + "---" + name + "---" + balance);
            }

            //6.1 让游标向下移动一行
            if(rs.next()){
                //判断是否有数据
                //6.2 获取数据
                int id = rs.getInt(1);
                String name = rs.getString("name");
                double balance = rs.getDouble(3);

                System.out.println(id + "---" + name + "---" + balance);
            }

            //6.1 让游标向下移动一行
            if(rs.next()){
                //判断是否有数据
                //6.2 获取数据
                int id = rs.getInt(1);
                String name = rs.getString("name");
                double balance = rs.getDouble(3);

                System.out.println(id + "---" + name + "---" + balance);
            }

            //6.1 让游标向下移动一行
            if(rs.next()){
                //判断是否有数据
                //6.2 获取数据
                int id = rs.getInt(1);
                String name = rs.getString("name");
                double balance = rs.getDouble(3);

                System.out.println(id + "---" + name + "---" + balance);
            }*/

          /*  //6.1 让游标向下移动一行
            rs.next();
            //6.2 获取数据
            int id2 = rs.getInt(1);
            String name2 = rs.getString("name");
            double balance2 = rs.getDouble(3);

            System.out.println(id2 + "---" + name2 + "---" + balance2);

            //6.1 让游标向下移动一行
            rs.next();
            //6.2 获取数据
            int id3 = rs.getInt(1);
            String name3 = rs.getString("name");
            double balance3 = rs.getDouble(3);

            System.out.println(id3 + "---" + name3 + "---" + balance3);*/


        } catch (ClassNotFoundException e) {
            e.printStackTrace();
        } catch (SQLException e) {
            e.printStackTrace();
        } finally {
            //7.释放资源

            if (rs != null) {
                try {
                    rs.close();
                } catch (SQLException e) {
                    e.printStackTrace();
                }
            }

            if (stmt != null) {
                try {
                    stmt.close();
                } catch (SQLException e) {
                    e.printStackTrace();
                }
            }

            if (conn != null) {
                try {
                    conn.close();
                } catch (SQLException e) {
                    e.printStackTrace();
                }
            }
        }
    }

    public static BigDecimal toBigDecimal(Object object, int size) {
        return (object == null ? BigDecimal.ZERO : new BigDecimal(object.toString())).setScale(size, BigDecimal.ROUND_HALF_UP);
    }

}
